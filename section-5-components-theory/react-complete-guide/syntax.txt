Get the NPM files 
  - npm install create-react-app [-g]

----------------------------------------------------------------

Creating the react application
  - create-react-app appName
Navigate to the directory where you want the react app to made

TIP: if you want the same structure as this react app has add this flag to the end of the command

--script-version 1.1.5

----------------------------------------------------------------

Folder structure
  - src: Are the folders and files where we write the source code of the project
  - public: the compressed production code ready for deployment


Index.html
We always have 1 html page, and is the only html which will contain all the markup

If we are making a multi page app, then we make multiple react apps and not multiple html pages

This is because each page in that application will be treated as a mini app within a parent container app

The most important element in that html is the div tag with the id of "root", this is where we mount our react app to

TIP: we can ad meta tags in the head of the HTML (like CSS libraries or meta information) we can do so

----------------------------------------------------------------

Index.js
This is where all the react source files are imported to, and is where we mount the application to the "#root" div

It uses the react method render(), which takes a react component and an HTML element to mount it to

----------------------------------------------------------------

JSX
This is reacts JS of HTML
It looks like normal HTML, but it isn't, because under the hood it is converted to JS methods

In summary, just stick to JSX and don't think much about it, its nice to know it is converted from this
    <div className="App">
      <p>
        My name is Carter
      </p>
    </div>
  
  React.createElement('div', {className: 'App'}, React.createElement('p', null, 'My name is Carter'););

As JSX is actually javascript, it means that we cannot use JS reserved keywords, like "class", so we have to use className to define a class attribute for a HTML element

TIP: Its best practice to wrap all the JSX code in 1 root element, it makes working with React so much easier
----------------------------------------------------------------

Components
React is all about working with modular components that are reusable

Components are basically JS files with several functions that all return JSX code that can then be used by React render() method

Components are our own "custom" element

TIP: In this case we made a new component in a new folder called "Person", it is a convention to name component folders and files with a capital letter.


Simplest Form
Components are literally functions that return JSX code

  Function Based
so using the ES6 form, we write an arrow function that returns JSX code and then export the function from the file

  const person = (props) => {
    return (
      <div>
        <p>
          My name is {props.name}, and I am {props.age} years old.
        </p>
        <p>{props.children}</p>
      </div>
    );
  };

  export default person;


  Class Based
  import React, {Component} from 'react';

  class Person extends Component {
    render() {
      return (
      <div>
        <p>
          My name is {this.props.name}, and I am {this.props.age} years old.
        </p>
        <p>{this.props.children}</p>
      </div>
    );
    }
  }

Importing it all in
So in App.js we import the default function from Person into the file, we also name default method as "Person" (capital P), all lowercase words are reserved for normal HTML tags, thus we use titleized words to work around that issue

  - import Person from './Person/Person';

And in App we can now use our React Component as if it were any HTML element

  <div className="App">
    <h1>Hi I'm a React App</h1>
    <p>This is really working!</p>
    <Person name="Idris" age="21" />
    <Person name="Tom" age="23" />
    <Person name="Harry" age="29">
      My Hobbies: Racing
    </Person>
  </div>

All components take the argument props, which allows us to essentially pass in attributes to our "custom" element

  - <Person name="Idris" age="21" />

Props
Props are attributes to the custom element that we made
  - {props.name}

We always have to wrap it round curly braces, like in ES6 template strings


All props have access to their children, mainly being the text we put in the tag or other elements within them

  <Person name="Harry" age="29">
    My Hobbies: Racing
  </Person>

We access them children property to access the data within the element
  - {props.children}

TIP: when using class based components, we use this.props to access the props, as props becomes an attribute of the component class

----------------------------------------------------------------

State
In this version of React, it allows us create dynamic variables that we can then attach as attributes to Components.

In this example we are using the class based way of making a component, because state is a property of Component class in the react library

TIP: in the newer versions of react, we can make webhooks which are like state but we can use them in function based components, which makes it so much easier to work with

We define a variable called "state" (always has to), and its an object, so all of its attributes can be any JS objects as well
  - state = {};

Here make it so that the persons attribute has an array of objects inside of it

We can then access the persons property, using the 
  - this.state.persons

We can access persons as you would usually do with an array

  class App extends Component {
    state = {
      persons: [
        { name: 'Idris', age: 21 },
        { name: 'Aurora', age: 23 },
        { name: 'Layfon', age: 29 },
      ],
    };

    render() {
      return (
        <div className="App">
          <h1>Hi I'm a React App</h1>
          <p>This is really working!</p>
          <button>Switch Name</button>
          <Person
            name={this.state.persons[0].name}
            age={this.state.persons[0].age}
          />
          <Person
            name={this.state.persons[1].name}
            age={this.state.persons[1].age}
          />
          <Person
            name={this.state.persons[2].name}
            age={this.state.persons[2].age}
          >
            My Hobbies: Racing
          </Person>
        </div>
      );
    }
  }

How to update State
We do so using the setState() method found in Component class

  -  switchNameHandler = () => {
      // console.log('Was clicked');
      // DON'T DO THIS this.state.persons[2].name = 'Layfon Wolfstien Alsief';
      this.setState({
        persons: [
          { name: 'Idris', age: 21 },
          { name: 'Aurora', age: 23 },
          { name: 'Layfon Wolfstien', age: 19 },
        ],
      });
    };

What this method does is only override the property persons, it will not touch any other attributes.

Now whenever the state is changed, React will recognize that, and will update that render on application

----------------------------------------------------------------

React update

react will update the screen in 2 places
  - 1. State
  - 2. Props

Here whenever a value changes in any of the 2, react sees this and will update the screen with the new values

----------------------------------------------------------------

Handlers
Event handlers are written within the class they are executed from, so in App we have a button element

  - <button onClick={this.switchNameHandler}>Switch Name</button>

We add the event listener to the onclick event
**In JSX its onClick, not onclick**

We write the event function as property
  - switchNameHandler = () => {
      console.log('Was clicked');
    };

And reference it within the button element, using the curly braces
  - <button onClick={this.switchNameHandler}>Switch Name</button>

----------------------------------------------------------------

React Hooks

This is state but for a functional based components

firstly we import useState, instead of Component
  - import React, { useState } from 'react';  

We define the state of a functional component, by using the useState method, and passing in the state object

  const [personsState, setPersonsState] = useState({
    persons: [
      { name: 'Idris', age: 21 },
      { name: 'Aurora', age: 23 },
      { name: 'Layfon', age: 29 },
    ],
    otherValue: 'Some other value',
  });  

This method returns an array with ALWAYS 2 values
  Value 1. being the state object, original and updated object
  Value 2. being a method that allows us to update the state, to let React know it has changed so React will auto update the DOM

So we array destructing to extract those 2 values, so that we can use it within the function

So now we can personsState to access the attributes within the state object
  <Person
    name={personsState.persons[0].name}
    age={personsState.persons[0].age}
  />

We can do an event handler update on the state as well

  const switchNameHandler = () => {
      // console.log('Was clicked');
      // DON'T DO THIS this.state.persons[2].name = 'Layfon Wolfstien Alsief';
      setPersonsState({
        persons: [
          { name: 'Idris', age: 21 },
          { name: 'Aurora', age: 23 },
          { name: 'Layfon Wolfstien', age: 19 },
        ],
      });
    };

Managing multiple states

TIP: By passing in an object, the previous state does not merge with new one passed to the method!

The way around that is to actually use multiple useStates within the object
remember that useState returns an array and a method, the method mutates the array that is returned from that useState call

But that method does not affect any other useStates array

So think of it like this, each useState is actually independent from one another, they are like houses in a block, all having different properties to each of them

Where as class state is like a high rise flat, where all floors are made with the same properties, and all changes to the building is reflected to everyone in the high rise flat


const [personsState, setPersonsState] = useState({
    persons: [
      { name: 'Idris', age: 21 },
      { name: 'Aurora', age: 23 },
      { name: 'Layfon', age: 29 },
    ],
  });

  const [otherState, setOtherState] = useState({
    otherState: 'some other state',
  });

----------------------------------------------------------------

Stateful and Stateless Components
  - Stateful Components: are components that manage state (a.ka. smart/ container components)
  - Stateless Components: are components that do not manage states (a.ka. dumb/ presentational components)

TIP: Its best to have lots of stateless components, as they are basically components that take data and output the data to react

TIP: Its best to have little of stateful components, because it makes your app easier to maintain and manage, because you can see where the data flow is, the logic of the app is primarily contained in these stateful components

----------------------------------------------------------------

Method referencing as props
  We can pass in methods from a containing container, or any component in that matter to other components.

So in this case, we want to pass the reference switchNameHandler in App container to Person component, instead of doing an import and export (in this case it would be very hectic to do), we pass in the method as an attribute to the Person tag

  - <Person
    name={this.state.persons[2].name}
    age={this.state.persons[2].age}
    click={this.switchNameHandler}
  >

The name of the attribute can be anything, but it has to be the same in all of the attributes and make it meaningful

Then in person, we can have it so that the onClick event listener will call that method when clicked, by accessing the props object and accessing the click attribute

  - <p onClick={props.click}>

TIP: Now we have actually changed the state of App, the method switchNameHandler changes state within the App tag, but we have now done it within Person (a dumb component)

Arguments in a method reference

2 ways, using bind is cleaner and more efficient as react re-renders your components a lot

bind
Using an old JS trick, we use bind to neatly call the function and return a new function that has the argument passed to it

  - click={this.switchNameHandler.bind(this, 'Ayub')}

Arrow function
Anonymous function returns the function with argument passed to it
  - <button onClick={() => this.switchNameHandler('Idris!!!')}>

----------------------------------------------------------------

Conditional statements in react

In react anything in {} (curly braces) can execute simple javascript, and as all of our components use jsx (syntactically sugar) we can insert these {} braces into the html like code

React can only execute simple javascript expressions, we cannot run block statements, so statements that require curly braces ({}) after the statement, so keywords like if() {}, while() {}, do while(){}, switch() {}, etc.

So to do conditional statements, we can use ternary operator, to do simple conditional statements

Here we wrap the jsx in curly braces ({}), to tell react this is going to have javascript within it

  - {this.state.showPersons ? (
      <div>
        <Person
          name={this.state.persons[0].name}
          age={this.state.persons[0].age}
        />
        <Person
          name={this.state.persons[1].name}
          age={this.state.persons[1].age}
        />
        <Person
          name={this.state.persons[2].name}
          age={this.state.persons[2].age}
          click={this.switchNameHandler.bind(this, 'Ayub')}
        >
          My Hobbies: Racing
        </Person>
      </div>
    ) : null}

The common sense approach

We can write the conditional outside of the return statement, and from there we have access to the normal javascript complex conditional expressions

We create a mutual variable, and we can change the variable contents whether the boolean showPersons is true or false, as react will run the render() every time the state changes, and so we can write a normal if statement outside the return statement, because jsx can only execute simple javascript, so we do the complex javascript outside the return and simply insert the jsx into the return

  - render() {
    let persons = null;

    if (this.state.showPersons) {
      persons = (
        <div>
          <Person
            name={this.state.persons[0].name}
            age={this.state.persons[0].age}
          />
          <Person
            name={this.state.persons[1].name}
            age={this.state.persons[1].age}
          />
          <Person
            name={this.state.persons[2].name}
            age={this.state.persons[2].age}
            click={this.switchNameHandler.bind(this, 'Ayub')}
          >
            My Hobbies: Racing
          </Person>
        </div>
      );
    }

    return (
      <div className="App">
        <h1>Hi I'm a React App</h1>
        <p>This is really working!</p>

        <button onClick={this.togglePersonsHandler}>Toggle Persons</button>

        {persons}
      </div>
    );
  }

----------------------------------------------------------------

Lists

Instead of hard-coding elements from the list, we can loop over it to render it, but even better when you pass an array to react, it will attempt to render each element to the DOM. 

This is really great, but each element in the array must be valid jsx code, so we can use the map method on the array to return a new array with each element being valid jsx code.

Much cleaner and more elegant this way

  - {this.state.persons.map((persons) => {
      return <Person name={persons.name} age={persons.age} />;
    })}

Updating state lists

Whenever you come to update a list, always do so in an immutable fashion, so make a copy of the list and update the copy, and then use the copy to update the original list.

Wr do this for transaction failures, and so we must let react do a rollback, and what does it do the rollback on? the original list, so never ever, ever, ver change the original list, always do it on a copy.

Using an ES6 features, we can use the spread operator to make the copy of the original list.


  - deletePersonHandler = (personIndex) => {
    // const persons = this.state.persons.splice();
    const persons = [...this.state.persons];
    persons.splice(personIndex, 1);
    this.setState({ persons });
  };

----------------------------------------------------------------

React key property in lists

In the previous explanation, we spoke about rendering list items with react, but there was a property that we forgot to add

The key prop
This is a property used by react to know and keep track of the individual elements in the list. 

We should always do this, as this is more efficient for React to keep track of DOM

The key prop needs an unique identifier as its value, and 9 times out of 10, we are fetching the data from an API, so it will have an id associated to the tuples, so we would assign the id of the tuple as the key to the value to the key prop.

----------------------------------------------------------------

Virtual DOM

In react, we have 2 coins to the DOM, the HTML DOM that is visible to the browser and a virtual DOM that reacts manages

From lists and updating, react uses the virtual DOM, so whenever we make an update to the state which affects the HTML DOM, the virtual DOM is actually updated and then is sent to replace the HTML DOM

Remember always make changes with immutable contents and not mutable contents, we should never play with the DOM, but let react do it for us

----------------------------------------------------------------

Styling

There are 2 ways of doing this
  - inline
  - external

inline
We write the styling directly into the element itself
It is better to write the style as a variable then plug it into the element, rather than write it directly into the element. 

  1. There is only 1 place to make changes to the style
  2. We can edit the style dynamically, by accessing the style object and changing it property values

Notice how we write the names using camel case notation, JS will have a compiler error with hyphen names

  - const style = {
      backgroundColor: 'green',
      color: 'white',
      font: 'inherit',
      border: '1px solid #bbb',
      padding: '0.8rem',
      cursor: 'pointer',
    };

 <button style={style}></button>

external
  1. We give the element a class name like so
    - <div className="Person"></div>
  2. Create a new css file, named as the component (in this case Person)
    - Person.css 
  3. Import the css file into the component file (in this case import Person.css into Person.js)
    - import './Person.css';
  4. Write the css in css file

----------------------------------------------------------------

Dynamic styling

In react everything is JS, so with inline styles we can write an object and within some sort of conditional statement, we can manipulate the style object to have a different style

Global declaration
  - const style = {
      backgroundColor: 'green',
      color: 'white',
      font: 'inherit',
      border: '1px solid #bbb',
      padding: '0.8rem',
      cursor: 'pointer',
    };

Conditional change
  - style.backgroundColor = 'red';

----------------------------------------------------------------

Dynamic Classes

In react everything is JS, so we can construct an array of classes which ares strings, then pass that array to the style attribute of an element - making sure that we call the .join(' ') method on the array to convert it to a string

So we create an empty array, and the arrays contents will change depending on conditions that we set, and at the end we convert the array to a string and pass it to the elements style attribute

  - const classes = [];

    if (this.state.persons.length <= 2) {
      classes.push('red'); // classes = ['red']
    }

    if (this.state.persons.length <= 1) {
      classes.push('bold'); // classes = ['red', 'bold']
    }
  
    <p className={classes.join(' ')}>This is really working!</p>

----------------------------------------------------------------

Sass in React

Follow these steps
  1. npm install node-sass@4.14.1
    - There is an compatibility error with react-scripts and the latest version of sass (5.0.0)
  2. Create the sass folder directory and main.scss and import all sass files into main.scss (Naming components the same as we did React - capital letter)
  3. Import the main.scss into index.js
    - import './sass/main.scss';
  
That's it!

----------------------------------------------------------------

Error Boundaries

This is a new feature in React 16, which allows us to create custom error message to present to the user, instead of the default React error message shown to the user

We first create a new ErrorBoundary component

  1. We create a class based component
    - class ErrorBoundary extends Component {
        state = {
          hasError: false,
          errorMessage: '',
        };

        componentDidCatch = (error, info) => {
          this.setState({ hasError: true, errorMessage: error });
        };

        render() {
          if (this.state.hasError) {
            return <h1>{this.state.errorMessage}</h1>;
          } else {
            return this.props.children;
          }
        }
      }
  2. We have to write 2 things here:
    - A state to keep track of the error 
    - A method which takes 2 arguments -> error and information about the error, in this case we called it componentDidCatch, which updates the state to set the error flag to true
  3. Wrap the code that you believe will thrown an error with the ErrorBoundary tag.

  We place the key in the ErrorBoundary element and not the Person element, as the react expects the wrapping element to have the key

    - <ErrorBoundary key={person.id}>
        <Person
          click={this.deletePersonHandler.bind(this, index)}
          name={person.name}
          age={person.age}
          
          changed={(event) => this.nameChangeHandler(event, person.id)}
        />
      </ErrorBoundary>

React will automatically call the error method, when an error happens, thus setting the error flag state to true, and thus we can use it in an if statement to return the custom error page when we want

